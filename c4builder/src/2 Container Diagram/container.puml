@startuml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include <azure/AzureCommon.puml>
!include <azure/Storage/AzureBlobStorage.puml>
!include <logos/rabbitmq.puml>
!include <logos/nginx.puml>

!include DEVICONS/angular.puml
!include DEVICONS/java.puml
!include DEVICONS/dotnet.puml
!include DEVICONS/msql_server.puml
!include DEVICONS/postgresql.puml
!include FONTAWESOME/users.puml

LAYOUT_WITH_LEGEND()

title Container diagram for eLibraryOnContainers

Person(customer, "Customer", "A customer of the library, looking for a book to borrow.")
Person(librarian, "Librarian", "Library worker, managing books collection, their physical copies and rentals.")

System_Boundary(c1, "eLibraryOnContainers"){
    Container(spa, "SPA", "Angular", "The main interface that the customer interacts with using web browser", $sprite="angular")
    Container(gateway, "API Gateway", ".NET with ASP.NET Core", "Routes all requests to appropriate services endpoints", $sprite="dotnet")

    ContainerQueue(rabbit, "Event bus", "RabbitMQ", "Event bus for asynchronous communication", $sprite=rabbitmq)

    Boundary(identity, "Identity") {
        Container(identity_api, "Identity service", ".NET with ASP.NET Core", "Manages users accounts and provide authentication", $sprite="dotnet")
        ContainerDb(identity_db, "Identity database", "PostgreSQL", "Holds accounts information", $sprite="postgresql")
    }

    Boundary(books, "Books") {
        Container(books_api, "Books service", ".NET with ASP.NET Core", "Manage books collection and physical copies stocks", $sprite="dotnet")
        ContainerDb(books_db, "Books database", "PostgreSQL", "Holds books and physical copies information", $sprite="postgresql")
        ContainerDb(books_read_db, "Books (READ) database", "PostgreSQL", "Holds books collection and availability information", $sprite="postgresql")        
    }
    
    Boundary(rentals, "Rentals") {
        Container(rentals_api, "Rentals service", "Java with Spring Boot", "Manage rentals and allow users to borrow books", $sprite="java")
        ContainerDb(rentals_db, "Rentals database", "PostgreSQL", "Holds rentals events and physical copies information", $sprite="postgresql")
        ContainerDb(rentals_read_db, "Rentals (READ) database", "PostgreSQL", "Holds aggregated rentals and physical copies availability information", $sprite="postgresql")    
    }

    'Boundary(storage, "Storage") {
    '    Container(storage_service, "Storage service", ".NET", "Manage images stored in Azure Blob Storage", $sprite="dotnet")
    '}
}

' -- External containers --
'AzureBlobStorage(azureBlobStorage, "Storage", "Azure Blob Storage", "Object storage for storing and serving books images.")

' -- Relationships --
Rel(customer, spa, "Uses", "HTTPS")
Rel(librarian, spa, "Uses", "HTTPS")

' SPA
Rel(spa, gateway, "Uses", "async, JSON/HTTPS")
'Rel(spa, azureBlobStorage, "Reads from", "async, JSON/HTTPS")

' Gateway routing
Rel(gateway, identity_api, "Uses", "async, JSON/HTTPS")
Rel(gateway, books_api, "Uses", "async, JSON/HTTPS")
Rel(gateway, rentals_api, "Uses", "async, JSON/HTTPS")

' Identity
Rel(identity_api, identity_db, "Reads from and writes to", "async, ADO.NET")

' Books
Rel(books_api, rabbit, "Produces to and consumes from", "async, JSON/AMQP")
Rel(books_api, books_db, "Reads from and writes to", "async, ADO.NET")
Rel(books_api, books_read_db, "Reads from and writes to", "async, ADO.NET")

' Rentals
Rel(rentals_api, rabbit, "Produces to and consumes from", "async, JSON/AMQP")
Rel(rentals_api, rentals_db, "Reads from and writes to", "async, JDBC")
Rel(rentals_api, rentals_read_db, "Reads from and writes to", "async, JDBC")

' Storage service
'Rel(storage_service, azureBlobStorage, "Saves to and deletes from", "async, JSON/HTTPS")
'Rel(storage_service, rabbit, "Consumes from", "async, JSON/AMQP")

@enduml
